const visual6502 = require('./visual6502')
const util = require('node:util');
const fs = require('node:fs');


process.stdout.write('creating ../src/segdefs.txt\n')
const segdefsFs = fs.createWriteStream('../src/segdefs.txt');
segdefsFs.write('# segdefs auto-generated by generatechipdefs.js\n');
segdefsFs.write('#   0  - wire number\n');
segdefsFs.write('#   1  - 0 (pull down), 1 (pull up)\n');
segdefsFs.write('#   2  - ignored\n');
segdefsFs.write('#   3+ - segments\n');

for (var i in visual6502.segdefs) {
    var seg = visual6502.segdefs[i];

    // convert the pull up/pull down to a numeric value
    if (seg[1] == '+') {
        seg[1] = 1;
    }
    if (seg[1] == '-') {
        seg[1] = 0;
    }

    for (var l in seg) {
        segdefsFs.write(seg[l].toString().padStart(2, ' '));
        if (!(l == seg.length-1)) {
            segdefsFs.write(',')
        }
    }
    segdefsFs.write('\n');
}
segdefsFs.end();


process.stdout.write('creating ../src/transdefs.txt\n')
const transdefsFs = fs.createWriteStream('../src/transdefs.txt');
transdefsFs.write('# transdefs auto-generated by generatechipdefs.js\n');
transdefsFs.write('#   0 - id\n');
transdefsFs.write('#   1 - gate\n');
transdefsFs.write('#   2 - c1\n');
transdefsFs.write('#   3 - c2\n');
for (var i in visual6502.transdefs) {
    var trans = visual6502.transdefs[i];
    var outputArray = new Array(4)
    outputArray[0] = trans[0].substring(1)
    outputArray[1] = trans[1]
    outputArray[2] = trans[2]
    outputArray[3] = trans[3]

    for (var l in outputArray) {
        transdefsFs.write(outputArray[l].toString().padStart(4, ' '));
        if (!(l == outputArray.length-1)) {
            transdefsFs.write(', ')
        }
    }
    transdefsFs.write('\n');
}
transdefsFs.end();

